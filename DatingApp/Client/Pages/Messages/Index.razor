@page "/messages/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class=" card-title">Date Messages</h3>
<br />
<a href="/messages/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Message
</a>
<br />
<br />
@if (Messages == null)
{
    <div class=" alert alert-info">Loading Messages...</div>
}
else
{
    <table class=" table table-responsive">
        <thead>
            <tr>
                <th>Message Description</th>
                <th>Actions</th>
               
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Messages)
            {
                <tr>
                    <td>@message.MessageDesc</td>
                   

                    <td>
                        <a href=" /messages/view/@message.Id" class=" btn btn-primary">
                            <span class=" oi oi-book"></span>
                        </a>
                        <a href=" /messages/edit/@message.Id" class=" btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>
                        <button class=" btn btn-danger" @onclick="@(()=>Delete(message.Id))">
                            <span class=" oi oi-delete"></span>
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Message> Messages;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
    }

    async Task Delete(int messageId)
    {
        var message = Messages.First(q => q.Id == messageId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {message.MessageDesc}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MessagesEndpoint}/{messageId}");
            await OnInitializedAsync();
        }

    }
}
